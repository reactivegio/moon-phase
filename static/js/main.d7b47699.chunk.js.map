{"version":3,"sources":["App.js","utils/moonPhase.js","serviceWorker.js","index.js"],"names":["App","useState","moonPhaseClass","setMoonPhaseClass","descPhase","setDescPhase","radius","setRadius","outerBG","setOuterBG","innerBG","setInnerinnerBG","innerHeight","setInnerHeight","innerWidth","setInnerWidth","innerLeft","setInnerLeft","innerTop","setInnerTop","innerBoxShadow","setInnerBoxShadow","useEffect","today","Date","year","month","day","actualPhase","totDayElapsed","percentage","parseInt","Math","round","Promise","resolve","reject","isWaxing","getMoonPhaseByDate","getFullYear","getMonth","getDate","then","res","outerColor","innerColor","percentagePhase","innerRadius","semiPhase","n","abs","innerDiameter","outerDiameter","innerOffset","blurredDiameter","blurredOffset","className","style","display","flex","marginRight","backgroundColor","borderRadius","height","width","left","top","boxShadow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wPAwJeA,MApJf,WAAgB,IAAD,EAC+BC,mBAAS,iBADxC,mBACNC,EADM,KACUC,EADV,OAEqBF,mBAAS,MAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGeJ,mBAAS,MAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIiBN,mBAAS,MAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKsBR,mBAAS,MAL/B,mBAKNS,EALM,KAKGC,EALH,OAMyBV,mBAAS,MANlC,mBAMNW,EANM,KAMOC,EANP,OAOuBZ,mBAAS,MAPhC,mBAONa,EAPM,KAOMC,EAPN,OAQqBd,mBAAS,MAR9B,mBAQNe,EARM,KAQKC,EARL,OASmBhB,mBAAS,MAT5B,mBASNiB,EATM,KASIC,EATJ,OAU+BlB,mBAAS,MAVxC,mBAUNmB,EAVM,KAUUC,EAVV,KAkHb,OAtGAC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,MCSf,SAA4BC,EAAMC,EAAOC,GAC9C,IAEIC,EAAc,EACdC,EAAgB,EAChBC,GAAc,EAuBlB,OAtBIJ,EAAQ,IACVD,IACAC,GAAS,IAKXG,EAFI,OAASJ,EACT,OAFFC,EAGsBC,EAAM,UAC9BE,GAAiB,WAEjBA,GADAD,EAAcG,SAASF,KAEvBD,EAAcI,KAAKC,MAAsB,GAAhBJ,KACN,IAAsB,IAAhBD,KACvBA,EAAc,EACdE,EAAa,GAGXA,EAAa,IAEbA,EADEF,EAAc,GACHI,KAAKC,MAA2B,IAApBL,EAAc,IAAY,KAAO,IAC1CI,KAAKC,MAAoB,GAAdL,EAAoB,KAAO,KAEnD,IAAIM,SAAQ,SAACC,EAASC,GAC3BD,EAAQ,CACNP,YAAaA,EACbS,SAAUT,EAAc,GACxBE,WAAYA,QDxCdQ,CACEf,EAAMgB,cACNhB,EAAMiB,WACNjB,EAAMkB,WACNC,MAAK,SAACC,GACN,IAAIvC,EAAY,GAChB,OAAQuC,EAAIf,aACV,KAAK,EACHxB,EAAY,WACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHA,EAAY,uBACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHA,EAAY,cACZ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHA,EAAY,sBACZ,MACF,KAAK,GACHA,EAAY,YACZ,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAY,sBACZ,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAY,oBACZ,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAY,uBAMhBC,EAAaD,GAEb,IACIwC,EADAC,EAAa,GAEbC,EAAkBH,EAAIb,WACtBgB,EAAkB,IAChBH,EAAIN,WACNO,EAAa,qBACbC,EAAa,kBACbC,IAAoB,GAEjBH,EAAIN,WACPO,EAAa,kBACbC,EAAa,qBACbC,IAAoB,KAGtBA,EAAkB,EAAIA,EACtBF,EAAa,kBACbC,EAAa,qBACRF,EAAIN,WACPO,EAAa,qBACbC,EAAa,oBAIjB,IAEIE,EADAC,EAA8B,EAAlBF,EAGdG,EAJkB,KAIZ,EADKjB,KAAKkB,IAAIF,IACmB,GAAK,IAE1CG,EAA8B,GADlCJ,EAAcE,EAAI,EAAKG,KAAkC,EAAIH,IAEzDI,EACFL,EAAY,EACRI,GAAoBH,GACnB,EAAIF,EAAcK,GAAoBH,EAE7C9C,EAAkBwC,EAAIN,SAAW,SAAW,UAE5C,IAAIiB,EAAkBH,EAAgB,GAClCI,EAAgBF,EAAc,EAClC1C,EAAgBkC,GAChBpC,EAAWmC,GACXrC,EAAU,GAAD,OAAI+C,EAAkB,EAAtB,OACTzC,EAAe,GAAD,OAAIyC,EAAJ,OACdvC,EAAc,GAAD,OAAIuC,EAAJ,OACbrC,EAAa,GAAD,OAAIsC,EAAJ,OACZpC,EAAY,GAAD,QAAK,IAAMmC,GAAmB,EAA9B,OACXjC,EAAkB,qBAAD,OAAsBwB,UAKzC,yBAAKW,UAAU,OACb,yBAAKC,MAAO,CAAEC,QAAS,SACrB,yBAAKD,MAAO,CAAEE,KAAM,uBAAwBC,YAAa,SACvD,yBACEJ,UAAW,iBAAmBtD,EAC9BuD,MAAO,CAAEI,gBAAiBrD,IAE1B,yBACEgD,UAAW,aAAetD,EAC1BuD,MAAO,CACLK,aAAcxD,EACdyD,OAAQnD,EACRoD,MAAOlD,EACPmD,KAAMjD,EACNkD,IAAKhD,EACLiD,UAAW/C,EACXyC,gBAAiBnD,KAGrB,0BAAM8C,UAAU,qBAChB,0BAAMA,UAAU,qBAChB,0BAAMA,UAAU,sBAGlB,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBAAkBpD,QEpIzBgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d7b47699.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getMoonPhaseByDate } from \"./utils/moonPhase\";\nimport \"./App.css\";\n\nfunction App() {\n  const [moonPhaseClass, setMoonPhaseClass] = useState(\"moonContainer\");\n  const [descPhase, setDescPhase] = useState(null);\n  const [radius, setRadius] = useState(null);\n  const [outerBG, setOuterBG] = useState(null);\n  const [innerBG, setInnerinnerBG] = useState(null);\n  const [innerHeight, setInnerHeight] = useState(null);\n  const [innerWidth, setInnerWidth] = useState(null);\n  const [innerLeft, setInnerLeft] = useState(null);\n  const [innerTop, setInnerTop] = useState(null);\n  const [innerBoxShadow, setInnerBoxShadow] = useState(null);\n\n  useEffect(() => {\n    const today = new Date();\n    getMoonPhaseByDate(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate()\n    ).then((res) => {\n      let descPhase = \"\";\n      switch (res.actualPhase) {\n        case 0:\n          descPhase = \"NEW MOON\";\n          break;\n        case 1:\n        case 2:\n        case 3:\n          descPhase = \"WAXING CRESCENT MOON\";\n          break;\n        case 4:\n        case 5:\n        case 6:\n          descPhase = \"QUATER MOON\";\n          break;\n        case 7:\n        case 8:\n        case 9:\n          descPhase = \"WAXING GIBBOUS MOON\";\n          break;\n        case 10:\n          descPhase = \"FULL MOON\";\n          break;\n        case 11:\n        case 12:\n        case 13:\n          descPhase = \"WANING GIBBOUS MOON\";\n          break;\n        case 14:\n        case 15:\n        case 16:\n          descPhase = \"LAST QUARTER MOON\";\n          break;\n        case 17:\n        case 18:\n        case 19:\n          descPhase = \"WANING CRESCENT MOON\";\n          break;\n        default:\n          break;\n      }\n\n      setDescPhase(descPhase);\n\n      let innerColor = \"\";\n      let outerColor;\n      let percentagePhase = res.percentage;\n      if (percentagePhase < 0.5) {\n        if (res.isWaxing) {\n          outerColor = \"rgb(225, 225, 225)\";\n          innerColor = \"rgb(70, 70, 70)\";\n          percentagePhase *= -1;\n        }\n        if (!res.isWaxing) {\n          outerColor = \"rgb(70, 70, 70)\";\n          innerColor = \"rgb(225, 225, 225)\";\n          percentagePhase *= -1;\n        }\n      } else {\n        percentagePhase = 1 - percentagePhase;\n        outerColor = \"rgb(70, 70, 70)\";\n        innerColor = \"rgb(225, 225, 225)\";\n        if (!res.isWaxing) {\n          outerColor = \"rgb(225, 225, 225)\";\n          innerColor = \"rgb(70, 70, 70)\";\n          // percentagePhase *= -1;\n        }\n      }\n      let outerDiameter = 100;\n      let semiPhase = percentagePhase * 2;\n      let innerRadius,\n        absPhase = Math.abs(semiPhase),\n        n = ((1 - absPhase) * outerDiameter) / 2 || 0.01;\n      innerRadius = n / 2 + (outerDiameter * outerDiameter) / (8 * n);\n      let innerDiameter = innerRadius * 2;\n      let innerOffset =\n        semiPhase > 0\n          ? outerDiameter / 2 - n\n          : -2 * innerRadius + outerDiameter / 2 + n;\n\n      setMoonPhaseClass(res.isWaxing ? \"waxing\" : \"waning\");\n\n      let blurredDiameter = innerDiameter - 10;\n      let blurredOffset = innerOffset + 10 / 2;\n      setInnerinnerBG(innerColor);\n      setOuterBG(outerColor);\n      setRadius(`${blurredDiameter / 2}px`);\n      setInnerHeight(`${blurredDiameter}px`);\n      setInnerWidth(`${blurredDiameter}px`);\n      setInnerLeft(`${blurredOffset}px`);\n      setInnerTop(`${(100 - blurredDiameter) / 2}px`);\n      setInnerBoxShadow(`0px 0px 10px 10px ${innerColor}`);\n    });\n  });\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flex: \"0 0 calc(33% - 10px)\", marginRight: \"20px\" }}>\n          <div\n            className={\"moonContainer \" + moonPhaseClass}\n            style={{ backgroundColor: outerBG }}\n          >\n            <div\n              className={\"innerMoon \" + moonPhaseClass}\n              style={{\n                borderRadius: radius,\n                height: innerHeight,\n                width: innerWidth,\n                left: innerLeft,\n                top: innerTop,\n                boxShadow: innerBoxShadow,\n                backgroundColor: innerBG,\n              }}\n            />\n            <span className=\"crater crater--1\"></span>\n            <span className=\"crater crater--2\"></span>\n            <span className=\"crater crater--3\"></span>\n          </div>\n\n          <div className=\"widgetHorizontal\">\n            <div className=\"widgetCentered\">{descPhase}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * Restituisce un numero che rappresenta la fase lunare attuale\n * 0 => New Moon\n * 1 => Waxing Crescent Moon\n * 2 => Waxing Crescent Moon\n * 3 => Waxing Crescent Moon\n * 4 => Quarter Moon\n * 5 => Quarter Moon\n * 6 => Quarter Moon\n * 7 => Waxing Gibbous Moon\n * 8 => Waxing Gibbous Moon\n * 9 => Waxing Gibbous Moon\n * 10 => Full Moon\n * 11 => Waning Gibbous Moon\n * 12 => Waning Gibbous Moon\n * 13 => Waning Gibbous Moon\n * 14 => Last Quarter Moon\n * 15 => Last Quarter Moon\n * 16 => Last Quarter Moon\n * 17 => Waning Crescent Moon\n * 18 => Waning Crescent Moon\n * 19 => Waning Crescent Moon\n * @param {*} year\n * @param {*} month\n * @param {*} day\n */\nexport function getMoonPhaseByDate(year, month, day) {\n  let c = 0;\n  let e = 0;\n  let actualPhase = 0;\n  let totDayElapsed = 0;\n  let percentage = -1;\n  if (month < 3) {\n    year--;\n    month += 12;\n  }\n  ++month;\n  c = 365.25 * year;\n  e = 30.6 * month;\n  totDayElapsed = c + e + day - 694039.09;\n  totDayElapsed /= 29.5305882; //divide by the moon cycle\n  actualPhase = parseInt(totDayElapsed); //int(totDayElapsed) -> b, take integer part of totDayElapsed\n  totDayElapsed -= actualPhase; //subtract integer part to leave fractional part of original totDayElapsed\n  actualPhase = Math.round(totDayElapsed * 21); //scale fraction from 0-10 and round\n  if (actualPhase >= 20 || actualPhase === 0) {\n    actualPhase = 0; //0 and 8 are the same so turn 8 into 0\n    percentage = 0;\n  }\n\n  if (percentage < 0) {\n    if (actualPhase > 10)\n      percentage = Math.round((actualPhase - 10) * 0.1 * 100) / 100;\n    else percentage = Math.round(actualPhase * 0.1 * 100) / 100;\n  }\n  return new Promise((resolve, reject) => {\n    resolve({\n      actualPhase: actualPhase,\n      isWaxing: actualPhase < 11,\n      percentage: percentage,\n    });\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}